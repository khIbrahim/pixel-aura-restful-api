openapi: 3.1.0
info:
  title: Store Members API
  version: 1.0.0
  description: >-
    API de gestion des membres de magasin (Store Members).
  contact:
    name: Backend Team
    email: dev@company.tld
servers:
  - url: http://localhost:8000/api/v1
    description: Local
security:
  - bearerAuth: []

paths:
  /stores/{store}/members:
    get:
      summary: Liste paginée des membres d'un magasin
      operationId: listStoreMembers
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: Liste paginée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStoreMemberList'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
    post:
      summary: Création d'un membre
      operationId: createStoreMember
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreMemberCreateRequest'
      responses:
        '201':
          description: Créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreMemberSingleResponse'
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/ServerError' }

  /stores/{store}/members/{store_member}:
    get:
      summary: Détails d'un membre
      operationId: getStoreMember
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreId'
        - $ref: '#/components/parameters/StoreMemberId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreMemberSingleResponse'
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      summary: Mise à jour partielle
      operationId: updateStoreMember
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreId'
        - $ref: '#/components/parameters/StoreMemberId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreMemberUpdateRequest'
      responses:
        '201':
          description: Mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreMemberSingleResponse'
        '400': { $ref: '#/components/responses/ValidationError' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      summary: Suppression logique d'un membre
      operationId: deleteStoreMember
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreId'
        - $ref: '#/components/parameters/StoreMemberId'
      responses:
        '204': { description: Supprimé }
        '409':
          description: Conflit (ex. shift actif)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404': { $ref: '#/components/responses/NotFound' }

  /store-members/{id}/force-destroy:
    delete:
      summary: Suppression définitive (hard delete)
      operationId: forceDestroyStoreMember
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreMemberIdPath'
      responses:
        '204': { description: Supprimé définitivement }
        '404': { $ref: '#/components/responses/NotFound' }

  /store-members/{id}/restore:
    post:
      summary: Restauration d'un membre supprimé
      operationId: restoreStoreMember
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreMemberIdPath'
      responses:
        '200':
          description: Restauré
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreMemberSingleResponse'
        '404': { $ref: '#/components/responses/NotFound' }

  /store-members/{store_member}/abilities:
    get:
      summary: Permissions d'un membre
      operationId: listStoreMemberAbilities
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreMemberId'
      responses:
        '200':
          description: Liste de permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        '404': { $ref: '#/components/responses/NotFound' }

  /store-members/{store_member}/audit:
    get:
      summary: Audit trail d'un membre
      operationId: auditStoreMember
      tags: [Audit]
      parameters:
        - $ref: '#/components/parameters/StoreMemberId'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Logs paginés
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogResponse'
        '501':
          description: Non implémenté (placeholder si inactif)

  /store-members/{store_member}/stats:
    get:
      summary: Statistiques d'activité d'un membre
      operationId: statsStoreMember
      tags: [Analytics]
      parameters:
        - $ref: '#/components/parameters/StoreMemberId'
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatsResponse'
        '404': { $ref: '#/components/responses/NotFound' }

  /stores/{store}/members/search:
    get:
      summary: Recherche avancée dans un magasin
      operationId: searchStoreMembers
      tags: [Store Members]
      parameters:
        - $ref: '#/components/parameters/StoreId'
        - in: query
          name: q
          schema: { type: string }
          description: Terme de recherche (nom, email, code)
        - in: query
          name: role
          schema: { $ref: '#/components/schemas/StoreMemberRole' }
        - in: query
          name: active
          schema: { type: boolean }
        - in: query
          name: sort_by
          schema: { type: string, enum: [first_name,last_name,email,role,created_at,updated_at] }
        - in: query
          name: sort_dir
          schema: { type: string, enum: [asc,desc], default: desc }
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: Résultats paginés
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStoreMemberList'

  /stores/{store}/members/import:
    post:
      summary: Import de membres (sync ou async)
      operationId: importStoreMembers
      tags: [Import/Export]
      parameters:
        - $ref: '#/components/parameters/StoreId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoreMemberImportRequest'
      responses:
        '200':
          description: Import synchrone terminé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSyncResponse'
        '202':
          description: Import asynchrone lancé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobAccepted'
        '400': { $ref: '#/components/responses/ValidationError' }

  /stores/{store}/members/export:
    get:
      summary: Export des membres (sync ou async)
      operationId: exportStoreMembers
      tags: [Import/Export]
      parameters:
        - $ref: '#/components/parameters/StoreId'
        - in: query
          name: async
          schema: { type: boolean }
        - in: query
          name: format
          schema: { type: string, enum: [xlsx,csv,ods], default: csv }
        - in: query
          name: role
          schema: { $ref: '#/components/schemas/StoreMemberRole' }
        - in: query
          name: is_active
          schema: { type: boolean }
        - in: query
          name: priority
          schema: { type: integer, minimum: 1, maximum: 10 }
      responses:
        '200':
          description: Export synchrone terminé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportSyncResponse'
        '202':
          description: Export asynchrone lancé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AsyncJobAccepted' }

  /stores/{store}/exports/{jobId}/download:
    get:
      summary: Téléchargement d'un export terminé
      operationId: downloadStoreMembersExport
      tags: [Import/Export]
      parameters:
        - $ref: '#/components/parameters/StoreId'
        - in: path
          name: jobId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Fichier
          content:
            text/csv: { schema: { type: string, format: binary } }
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema: { type: string, format: binary }
        '404': { $ref: '#/components/responses/NotFound' }

  /stores/{store}/members/{store_member}/authenticate:
    post:
      summary: Authentifier un membre par code + PIN
      operationId: authenticateStoreMember
      tags: [Authentication]
      parameters:
        - $ref: '#/components/parameters/StoreId'
        - $ref: '#/components/parameters/StoreMemberId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreMemberAuthenticateRequest'
      responses:
        '200':
          description: Authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreMemberSingleResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }

  /members/me:
    get:
      summary: Récupère le membre authentifié (contexte device)
      operationId: getAuthenticatedStoreMember
      tags: [Authentication]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      store_member: { $ref: '#/components/schemas/StoreMember' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /members/logout:
    post:
      summary: Déconnexion d'un membre
      operationId: logoutStoreMember
      tags: [Authentication]
      responses:
        '200':
          description: Déconnecté
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    StoreId:
      in: path
      name: store
      required: true
      schema: { type: integer, minimum: 1 }
    StoreMemberId:
      in: path
      name: store_member
      required: true
      schema: { type: integer, minimum: 1 }
    StoreMemberIdPath:
      in: path
      name: id
      required: true
      schema: { type: integer, minimum: 1 }
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    PerPage:
      in: query
      name: per_page
      schema: { type: integer, minimum: 5, maximum: 50, default: 15 }

  responses:
    Unauthorized:
      description: Non authentifié
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Forbidden:
      description: Accès refusé
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    NotFound:
      description: Ressource introuvable
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    ValidationError:
      description: Erreur de validation
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ValidationErrorResponse' }
    ServerError:
      description: Erreur interne
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }

  schemas:
    StoreMemberRole:
      type: string
      enum: [owner, manager, cashier, kitchen]
    StoreMember:
      type: object
      properties:
        id: { type: integer }
        store_id: { type: integer }
        name: { type: string }
        role: { $ref: '#/components/schemas/StoreMemberRole' }
        code_number: { type: integer, description: 'Numéro interne' }
        code: { type: string, description: 'Code formaté (ex: MGR-003)' }
        is_active: { type: boolean }
        meta: { type: object, additionalProperties: true }
        permissions:
          type: array
          items: { type: string }
        last_login_at: { type: string, format: date-time, nullable: true }
        login_count: { type: integer }
        failed_attempts: { type: integer }
        locked_until: { type: string, format: date-time, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    StoreMemberCreateRequest:
      type: object
      required: [name, role]
      properties:
        name: { type: string, maxLength: 120 }
        role: { $ref: '#/components/schemas/StoreMemberRole' }
        pin: { type: string, pattern: '^\\d{4,8}$', description: 'Obligatoire pour owner/manager' }
        is_active: { type: boolean, default: true }
        meta: { type: object, additionalProperties: true }
    StoreMemberUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 120 }
        role: { $ref: '#/components/schemas/StoreMemberRole' }
        pin: { type: string, pattern: '^\\d{4,8}$' }
        is_active: { type: boolean }
        meta: { type: object, additionalProperties: true }
        permissions:
          type: array
          items: { type: string }
    StoreMemberAuthenticateRequest:
      type: object
      required: [code, pin]
      properties:
        code: { type: string, maxLength: 20 }
        pin: { type: string, maxLength: 8 }
    StoreMemberImportRequest:
      type: object
      required: [file]
      properties:
        file:
          type: string
          format: binary
        async: { type: boolean, default: false }
        options:
          type: object
          properties:
            batch_size: { type: integer, minimum: 1, maximum: 1000, default: 100 }
            use_batch_mode: { type: boolean, default: false }
            priority: { type: integer, minimum: 0, maximum: 10 }
    StoreMemberExportFilters:
      type: object
      properties:
        async: { type: boolean, default: false }
        format: { type: string, enum: [csv, xlsx, ods], default: csv }
        role: { $ref: '#/components/schemas/StoreMemberRole' }
        is_active: { type: boolean }
        priority: { type: integer, minimum: 1, maximum: 10 }
    ExportSyncResponse:
      type: object
      properties:
        message: { type: string }
        data: { $ref: '#/components/schemas/ExportResult' }
    ExportResult:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        filePath: { type: string }
        format: { type: string }
        recordCount: { type: integer }
        processedTimeMs: { type: integer }
        jobId: { type: string, nullable: true }
        downloadUrl: { type: string, format: uri }
    ImportSyncResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            success: { type: boolean }
            inserted: { type: integer }
            updated: { type: integer }
            errors:
              type: array
              items: { type: string }
    AsyncJobAccepted:
      type: object
      properties:
        job_id: { type: string }
        status: { type: string, enum: [queued, processing], default: queued }
        message: { type: string }
    StoreMemberSingleResponse:
      type: object
      properties:
        message: { type: string }
        data: { $ref: '#/components/schemas/StoreMember' }
    PaginatedStoreMemberList:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/StoreMember' }
        meta: { $ref: '#/components/schemas/PaginationMeta' }
        links: { $ref: '#/components/schemas/PaginationLinks' }
    PaginationMeta:
      type: object
      properties:
        current_page: { type: integer }
        from: { type: integer, nullable: true }
        last_page: { type: integer }
        path: { type: string }
        per_page: { type: integer }
        to: { type: integer, nullable: true }
        total: { type: integer }
    PaginationLinks:
      type: object
      properties:
        first: { type: string, nullable: true }
        last: { type: string, nullable: true }
        prev: { type: string, nullable: true }
        next: { type: string, nullable: true }
    AuditLogEntry:
      type: object
      properties:
        id: { type: string }
        event: { type: string }
        user_id: { type: integer, nullable: true }
        old_values: { type: object, additionalProperties: true }
        new_values: { type: object, additionalProperties: true }
        created_at: { type: string, format: date-time }
    AuditLogResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/AuditLogEntry' }
        meta: { $ref: '#/components/schemas/PaginationMeta' }
    StatsResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            total_shifts: { type: integer }
            total_hours: { type: number, format: float }
            last_login: { type: string, format: date-time, nullable: true }
            created_at: { type: string, format: date-time }
          required: [total_shifts,total_hours]
        meta:
          type: object
          properties:
            member_id: { type: integer }
            member_name: { type: string }
    LogoutResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            store_member: { $ref: '#/components/schemas/StoreMember' }
    ErrorResponse:
      type: object
      properties:
        message: { type: string }
        code: { type: string, nullable: true }
        errors:
          type: object
          additionalProperties: true
    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: array
                items: { type: string }

x-tags:
  - name: Store Members
  - name: Import/Export
  - name: Authentication
  - name: Audit
  - name: Analytics

