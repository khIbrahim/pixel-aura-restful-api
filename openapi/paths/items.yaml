items-list:
  get:
    summary: Lister les articles
    tags: [Items]
    parameters:
      - in: query
        name: search
        schema: { type: string }
        description: Recherche par nom, description, SKU ou tags
      - in: query
        name: category_id
        schema: { type: integer }
        description: Filtrer par catégorie
      - in: query
        name: is_active
        schema: { type: boolean }
        description: Filtrer par statut d'activation
      - in: query
        name: with
        schema:
          type: string
          example: "category,options,ingredients,variants,tax,media"
        description: Relations à charger (séparées par des virgules)
      - in: query
        name: per_page
        schema: { type: integer, default: 25, minimum: 1, maximum: 100 }
        description: Nombre d'éléments par page
    responses:
      '200':
        description: Liste paginée des articles
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '../components/items.openapi.yaml#/components/schemas/Item'
                meta:
                  type: object
                  properties:
                    current_page:
                      type: integer
                      example: 1
                    per_page:
                      type: integer
                      example: 25
                    total:
                      type: integer
                      example: 100
                    last_page:
                      type: integer
                      example: 4
    security:
      - bearerAuth: []
    x-abilities:
      - items:read
  post:
    summary: Créer un article
    tags: [Items]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/items.openapi.yaml#/components/schemas/ItemCreateRequest'
        multipart/form-data:
          schema:
            allOf:
              - $ref: '../components/items.openapi.yaml#/components/schemas/ItemCreateRequest'
              - type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Fichier image à uploader
    responses:
      '201':
        description: Article créé avec succès
        content:
          application/json:
            schema:
              $ref: '../components/items.openapi.yaml#/components/schemas/ItemResponse'
      '422':
        description: Erreur de validation
        content:
          application/json:
            schema:
              $ref: '../components/items.openapi.yaml#/components/schemas/ValidationError'
      '500':
        description: Erreur serveur
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Erreur lors de la création de l'item"
                error:
                  type: string
    security:
      - bearerAuth: []
    x-abilities:
      - items:create

items-detail:
  parameters:
    - in: path
      name: item
      required: true
      schema: { type: integer }
      description: ID de l'article
  get:
    summary: Obtenir un article spécifique
    tags: [Items]
    responses:
      '200':
        description: Détails de l'article
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '../components/items.openapi.yaml#/components/schemas/Item'
      '404':
        description: Article non trouvé
    security:
      - bearerAuth: []
    x-abilities:
      - items:read
  put:
    summary: Mettre à jour un article
    tags: [Items]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/items.openapi.yaml#/components/schemas/ItemUpdateRequest'
        multipart/form-data:
          schema:
            allOf:
              - $ref: '../components/items.openapi.yaml#/components/schemas/ItemUpdateRequest'
              - type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Fichier image à uploader
    responses:
      '200':
        description: Article mis à jour avec succès
        content:
          application/json:
            schema:
              $ref: '../components/items.openapi.yaml#/components/schemas/ItemResponse'
      '404':
        description: Article non trouvé
      '422':
        description: Erreur de validation
        content:
          application/json:
            schema:
              $ref: '../components/items.openapi.yaml#/components/schemas/ValidationError'
      '500':
        description: Erreur serveur
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Erreur lors de la mise à jour de l'item"
                error:
                  type: string
    security:
      - bearerAuth: []
    x-abilities:
      - items:update
  patch:
    summary: Mettre à jour partiellement un article
    tags: [Items]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/items.openapi.yaml#/components/schemas/ItemUpdateRequest'
    responses:
      '200':
        description: Article mis à jour avec succès
        content:
          application/json:
            schema:
              $ref: '../components/items.openapi.yaml#/components/schemas/ItemResponse'
      '404':
        description: Article non trouvé
      '422':
        description: Erreur de validation
        content:
          application/json:
            schema:
              $ref: '../components/items.openapi.yaml#/components/schemas/ValidationError'
    security:
      - bearerAuth: []
    x-abilities:
      - items:update
  delete:
    summary: Supprimer un article
    tags: [Items]
    responses:
      '200':
        description: Article supprimé avec succès
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Item supprimé avec succès"
      '404':
        description: Article non trouvé
      '422':
        description: Impossible de supprimer (contraintes métier)
        content:
          application/json:
            schema:
              $ref: '../components/items.openapi.yaml#/components/schemas/ValidationError'
      '500':
        description: Erreur serveur
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Erreur lors de la suppression de l'item"
                error:
                  type: string
    security:
      - bearerAuth: []
    x-abilities:
      - items:delete
