openapi: 3.0.3
info:
  title: Categories API
  version: 1.0.0
  description: |
    API REST des catégories pour le POS restaurant (v1).
    Toutes les routes sont sous authentification Sanctum (Bearer) et requièrent des abilities spécifiques.
servers:
  - url: /api
security:
  - SanctumToken: []
paths:
  /v1/categories:
    get:
      summary: Lister les catégories
      description: Retourne une liste paginée des catégories du store courant.
      tags: [Categories]
      parameters:
        - in: query
          name: search
          schema: { type: string }
          description: Filtre texte sur `name`, `slug` ou `tags`.
        - in: query
          name: is_active
          schema: { type: boolean }
          description: Filtre sur le statut actif.
        - in: query
          name: parent_id
          schema: { type: integer, format: int64 }
          description: Filtrer par catégorie parente.
        - in: query
          name: with
          schema:
            type: string
            description: Liste de relations, séparées par des virgules (children,parent).
          example: children,parent
        - in: query
          name: per_page
          schema: { type: integer, default: 25, minimum: 1 }
          description: Nombre d'éléments par page.
      responses:
        '200':
          description: Liste paginée des catégories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPaginatedResponse'
      x-abilities:
        - categories:read
    post:
      summary: Créer une catégorie
      tags: [Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '201':
          description: Catégorie créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCreateResponse'
        '409':
          description: Conflit de slug (existe déjà)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDetailed'
      x-abilities:
        - category:create

  /v1/categories/{categoryId}:
    parameters:
      - in: path
        name: categoryId
        required: true
        schema: { type: integer, format: int64 }
        description: Identifiant de la catégorie
    get:
      summary: Détail d'une catégorie
      tags: [Categories]
      responses:
        '200':
          description: Catégorie
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Category'
        '404':
          description: Non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      x-abilities:
        - categories:read
    put:
      summary: Mettre à jour une catégorie
      tags: [Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        '200':
          description: Catégorie mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryUpdateResponse'
        '409':
          description: Conflit de slug
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDetailed'
      x-abilities:
        - category:update
    patch:
      summary: Mettre à jour une catégorie (partiel)
      tags: [Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        '200':
          description: Catégorie mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryUpdateResponse'
        '409':
          description: Conflit de slug
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDetailed'
      x-abilities:
        - category:update
    delete:
      summary: Supprimer une catégorie
      tags: [Categories]
      responses:
        '200':
          description: Supprimée
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Catégorie supprimée
      x-abilities:
        - category:delete

  /v1/categories/reorder:
    patch:
      summary: Réordonner des catégories (positions)
      tags: [Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryReorderRequest'
      responses:
        '200':
          description: Réordonnancement appliqué
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Réordonnancement appliqué
        '422':
          description: Positions dupliquées ou validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDetailed'
      x-abilities:
        - category:reorder

  /v1/categories/{categoryId}/activation:
    patch:
      summary: Basculer le statut actif de la catégorie
      tags: [Categories]
      parameters:
        - in: path
          name: categoryId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryToggleActivationRequest'
      responses:
        '200':
          description: Statut mis à jour
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Statut mis à jour
                  data:
                    $ref: '#/components/schemas/Category'
      x-abilities:
        - category:activate

  /v1/categories/{categoryId}/images:
    post:
      summary: Uploader/remplacer l'image de la catégorie
      tags: [Categories]
      parameters:
        - in: path
          name: categoryId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryUploadImageMultipartRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUploadImageJsonRequest'
      responses:
        '200':
          description: Image uploadée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image uploadée avec succès
                  data:
                    $ref: '#/components/schemas/Category'
                  urls:
                    $ref: '#/components/schemas/UploadedImageUrls'
        '422':
          description: Validation échouée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDetailed'
      x-abilities:
        - category:update
    get:
      summary: Obtenir les infos d'image de la catégorie
      tags: [Categories]
      parameters:
        - in: path
          name: categoryId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Données image
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CategoryImageObjectNullable'
      x-abilities:
        - categories:read
    delete:
      summary: Supprimer l'image de la catégorie (si présente)
      tags: [Categories]
      parameters:
        - in: path
          name: categoryId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Image supprimée
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image supprimée
      x-abilities:
        - category:update

  /v1/categories/{categoryId}/images/{imageId}:
    get:
      summary: Obtenir une image spécifique (meta)
      tags: [Categories]
      parameters:
        - in: path
          name: categoryId
          required: true
          schema: { type: integer, format: int64 }
        - in: path
          name: imageId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Données image
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CategoryImageObjectNullable'
        '404':
          description: Image non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      x-abilities:
        - categories:read
    delete:
      summary: Supprimer une image spécifique
      tags: [Categories]
      parameters:
        - in: path
          name: categoryId
          required: true
          schema: { type: integer, format: int64 }
        - in: path
          name: imageId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Image supprimée
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image supprimée
        '404':
          description: Image non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      x-abilities:
        - category:update

components:
  securitySchemes:
    SanctumToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Category:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        slug: { type: string }
        description: { type: string, nullable: true }
        tags:
          type: array
          items: { type: string }
          nullable: true
        position: { type: integer }
        parent_id: { type: integer, format: int64, nullable: true }
        parent:
          oneOf:
            - $ref: '#/components/schemas/Category'
            - { type: 'null' }
        children:
          type: array
          items: { $ref: '#/components/schemas/Category' }
        is_active: { type: boolean }
        image:
          oneOf:
            - $ref: '#/components/schemas/CategoryImageObject'
            - { type: 'null' }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    CategoryImageObject:
      type: object
      properties:
        id: { type: integer, format: int64 }
        type: { type: string, nullable: true, enum: [thumbnail, banner, icon, null] }
        url: { type: string, format: uri, nullable: true }
        thumb_url: { type: string, format: uri, nullable: true }
        medium_url: { type: string, format: uri, nullable: true }
        file_name: { type: string }
        created_at: { type: string, format: date-time }

    CategoryImageObjectNullable:
      oneOf:
        - $ref: '#/components/schemas/CategoryImageObject'
        - { type: 'null' }

    CategoryCreateRequest:
      type: object
      required: [name]
      properties:
        name: { type: string, maxLength: 255 }
        description: { type: string, nullable: true }
        tags:
          type: array
          items: { type: string, maxLength: 50 }
          nullable: true
        position: { type: integer, minimum: 1, nullable: true }
        parent_id: { type: integer, format: int64, nullable: true }
        is_active: { type: boolean, default: true, nullable: true }

    CategoryUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 255 }
        description: { type: string, nullable: true }
        tags:
          type: array
          items: { type: string, maxLength: 50 }
        position: { type: integer, minimum: 1 }
        parent_id: { type: integer, format: int64 }
        is_active: { type: boolean }

    CategoryReorderRequest:
      type: object
      required: [items]
      properties:
        items:
          type: array
          minItems: 1
          items:
            type: object
            required: [id, position]
            properties:
              id: { type: integer, format: int64 }
              position: { type: integer, minimum: 1 }

    CategoryToggleActivationRequest:
      type: object
      properties:
        is_active: { type: boolean }

    CategoryUploadImageMultipartRequest:
      type: object
      properties:
        image:
          type: string
          format: binary
          description: Fichier image. Requis si `image_url` non fourni.
        image_url:
          type: string
          format: uri
          description: URL d'image. Requis si `image` non fourni.
        type:
          type: string
          enum: [thumbnail, banner, icon]

    CategoryUploadImageJsonRequest:
      type: object
      properties:
        image_url:
          type: string
          format: uri
        type:
          type: string
          enum: [thumbnail, banner, icon]

    UploadedImageUrls:
      type: object
      properties:
        url: { type: string, format: uri }
        thumb_url: { type: string, format: uri }
        medium_url: { type: string, format: uri }

    CategoryCreateResponse:
      type: object
      properties:
        message:
          type: string
          example: La catégorie a bien été créée
        data:
          $ref: '#/components/schemas/Category'

    CategoryUpdateResponse:
      type: object
      properties:
        message:
          type: string
          example: La catégorie a bien été mise à jour
        data:
          $ref: '#/components/schemas/Category'

    CategoryPaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        meta:
          type: object
          properties:
            current_page: { type: integer }
            per_page: { type: integer }
            total: { type: integer }
            last_page: { type: integer }

    ErrorMessage:
      type: object
      properties:
        message: { type: string }

    ErrorMessageDetailed:
      type: object
      properties:
        message: { type: string }
        error: { type: string }
